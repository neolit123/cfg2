0.23.0 - 14.10.2015
- don't escape user values from C
- add optional argument to cfg_free()
- add cfg_entry_value_get()
- add cfg_alloc()
- fix some typos and context in README

0.22.0 - 14.10.2015
- much safer parser; but there are still some ways to trick it into
allocating bad key/values
- unescaped quotes now preserve whitespace instead of escaped ones
- allow the parser to warn about unclosed quotes
- allow the parser to warn about missing equal signs on lines
- cleanup and more test cases in test.cfg
- support both # and ; comment characters

0.21.0 - 13.10.2015
- improve the parser to store sections even if empty
- avoid allocating zero length entries and sections
- swap the default key/value and section separator characters
- convert separator characters to spaces if found in the input string

0.20.0 - 11.10.2015
- allow cfg_parse_buffer() to receive a sz argument
- remove second argument of cfg_init()
- small code and test.cfg cleanup

0.19.0 - 10.10.2015
- added support for section enumeration
- some code cleanup

0.18.0 - 10.10.2015
- deprecate cfg_key_get() as this requires hashing of values which can be
expensive
- expose cfg_hash_get() as an API function
- add local implementation of strdup()
- comment cleanup in the header

0.17.0 - 10.10.2015
- added a function to open FILE*
- added the cfg_bool type
- cleanup of the header

0.16.0 - 09.10.2015
- added support for binary values

0.15.0 - 09.10.2015
- add section support!
- support quoted keys and values to preserve whitespace
- optimize the cache: the cache is now a simple list of cfg_entry_t pointers
- ingore the cache_size argument in cfg_init(); the user should set it instead
directly
- coding style cleanup

0.14.0 - 08.10.2015
- greatly improve the parser
- expose missing API function
- cleanup

0.13.0 - 08.10.2015
- implement support for escaped '=' characters

0.12.0 - 19.11.2013
- improved memory organization via the sub-struct cfg_entry_t

0.11.0 - 15.10.2012
- added better cfg_cache_size_set() handling

0.10.0 - 14.10.2012
- initial release
